# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: subdir/package-lock.json
    
    - name: clean, install, build
      run: |
        npm ci
        npm run build --if-present
    
    # - name: rsync deployments
    #   uses: burnett01/rsync-deployments@5.1
    #   with:
    #       switches: -avzr --delete
    #       path: ./*
    #       remote_path: /home/ec2-user/persibstg
    #       remote_host: ec2-18-141-211-177.ap-southeast-1.compute.amazonaws.com
    #       remote_user: ec2-user
    #       remote_key: "${{ secrets.SSH_PRIVATE_KEY }}"

    - name: Deploy in EC2
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
        HOSTNAME : ec2-18-141-211-177.ap-southeast-1.compute.amazonaws.com
        USER_NAME : ec2-user
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
        
          #Now we have got the access of EC2 and we will start the deploy .
          pm2 delete all
          cd /home/ec2-user/persibstg
          
          mv package-lock.json ..
          git pull origin main &&
          pm2 start app.js
          mv ../package-lock.json .
        '